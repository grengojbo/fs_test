#! /bin/bash

### BEGIN INIT INFO
# Provides:          freeswitch
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: The FreeSWITCH Voice Switching System
# Description:       An advanced platform for voice services
### END INIT INFO

# Do NOT "set -e"
# Before editing read
# http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html

# Author: Alfredo Palhares <masterkorp@masterkorp.net>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="FreeSWITCH Voice Switching System"
NAME=freeswitch
DAEMON=/usr/bin/$NAME
USER=freeswitch
GROUP=daemon
PIDFILE=/var/run/$NAME/$NAME.pid
RUNDIR=/var/run/freeswitch
SCRIPTNAME=/etc/init.d/$NAME


# Read configuration variable file if it is present
if [ -r /etc/default/$NAME ]; then 
  . /etc/default/$NAME 
fi                                           

if [ "$FREESWITCH_ENABLED" != "true" ]; then 
  echo "$DESC not enabled yet. Edit /etc/default/$NAME first."
  exit 0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that sets ulimit values for the daemon
#
do_setlimits() {
  ulimit -c unlimited
  ulimit -d unlimited
  ulimit -f unlimited
  ulimit -n 999999
  ulimit -v unlimited
  ulimit -s 240
  ulimit -l unlimited
  return 0
}

#
# Function that starts the daemon/service
#
do_start() {
  do_status >/dev/null 2>&1; state=$?;
  if ((state == 3)); then
    do_setlimits
    $DAEMON -u $USER -g $GROUP $FREESWITCH_PARAMS
  else
    echo -e "\r"
    log_failure_msg "$DESC is already running"
    return 7
  fi
  # Wait for freeswitch to fully start
  sleep 20
  do_status >/dev/null 2>&1; state=$?;
  if ((state == 0)); then
    log_success_msg "Done"
    return 0
  else
    echo -e "\r"
    log_warning_msg "$DESC couldn't be started or is taking too long"
    return 1
  fi
}

#
# Function that stops the daemon/service
#
do_stop() {
  do_status >/dev/null 2>&1; state=$?;
  if ((state == 0)); then
    do_setlimits
    $DAEMON -u $USER -g $GROUP -stop
  else
    echo -e "\r"
    log_failure_msg "$DESC is not running"
    return 7
  fi
  # Wait for freeswitch to fully stop
  sleep 5
  do_status >/dev/null 2>&1; state=$?;
  if ((state == 3)); then
    log_success_msg "Done"
    return 0
  else
    echo -e "\r"
    log_warning_msg "$DESC couldn't be stoped or is taking too long"
    return 1
  fi
}

#
# Function that reloads the config files
#
do_reload() {
  reload=$(fs_cli -x reloadxml 2>&1)
  echo -e "\r"
  if [[ $reload =~ "Success" ]]; then
    log_success_msg "Done"
    return 0
  else
    log_failure_msg "Error realoading configuration"
    return 1
  fi
}

#
# Function that reloads the config files
#
do_status() {
  status=$(fs_cli -x status 2>&1)
  # Program is running
  if [[ $status =~ UP ]]; then
    log_success_msg "$DESC is up"
    return 0
  # Program is not running
  elif [[ $status =~ ERROR ]]; then
    # Program is not running and the PIDFILE exists
    if [[ -f $PIDFILE ]]; then
      log_failure_msg "$DESC is down and pid file still exists"
      return 1
    fi
    log_failure_msg "$DESC is down"
    return 3
  # Unknown status
  else
    log_warning_msg "Unknown status of $DESC"
    return 4
  fi
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC"
    do_start
    log_end_msg $?
	;;
  stop)
    log_daemon_msg "Stopping $DESC"
    do_stop
    log_end_msg $?
	;;
  reload|force-reload)
    log_daemon_msg "Reloading $DESC"
    do_reload
    log_end_msg $?
  ;;
  restart)
    log_daemon_msg "Restarting $DESC"
    do_stop
    case "$?" in
      0|7)
        do_start
        log_end_msg $?
      ;;
      1)
        log_end_msg 1
      ;;
    esac
	;;
  status)
    do_status
    log_end_msg $?
  ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    exit 2
	;;
esac
